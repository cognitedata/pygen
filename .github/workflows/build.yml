---
name: build

on:
  pull_request:

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install required dependencies
        run: |
          uv sync --all-extras
      - name: Linting and static code checks
        run: pre-commit run --all-files

  build-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade --upgrade-strategy eager --no-cache-dir -r docs/requirements.txt

      - name: Build documentation
        run: |
          mkdocs build

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          # Skipping  3.11 as we assume it is covered by 3.10 and 3.12
          - "3.12"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - run: uv sync --all-extras

      - name: Test
        run: uv run pytest cognite tests/test_unit -v

      - name: Test CLI
        run: uv run pygen --help

      - name: Build package
        run: uv build

  coverage:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Test
        env:
          CDF_CLUSTER: ${{ vars.CDF_CLUSTER }}
          CDF_PROJECT: ${{ vars.CDF_PROJECT }}
          IDP_CLIENT_ID: ${{ vars.IDP_CLIENT_ID }}
          IDP_CLIENT_SECRET: ${{ secrets.IDP_CLIENT_SECRET }}
          IDP_TENANT_ID: ${{ secrets.IDP_TENANT_ID }}
        run: uv run pytest --cov=cognite/ --cov-config=pyproject.toml --cov-report=xml:coverage.xml tests/

      - name: Push coverage report to PR
        uses: orgoro/coverage@v3.2
        with:
            coverageFile: coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
            thresholdAll: 0.6

  build_and_test_streamlit_pyodide:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package using uv
        run: uv build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install pyodide@0.26.2 # stlite currently using pyodide 0.26.2
      - name: Install pygen in pyodide environment
        run: |
          whl_file=$(find dist -name "*.whl" | sed 's|^dist/||') # Find the built wheel file, remove dist/ prefix
          echo "Found built wheel file: $whl_file"
          PYGEN_FILE_PATH=$whl_file \
          PACKAGES="[\"pyodide-http\", \"pandas\", \"typing-extensions>=4.10.0\", \"http://localhost:3000/dist/$whl_file\"]" \
          node test-pyodide.js


  build_and_test_jupyter_pyodide:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package using uv
        run: uv build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install pyodide@0.26.2 # JupyterLite currently using pyodide 0.26.2
      - name: Install pygen in pyodide environment
        run: |
          whl_file=$(find dist -name "*.whl" | sed 's|^dist/||') # Find the built wheel file, remove dist/ prefix
          echo "Found built wheel file: $whl_file"
          PYGEN_FILE_PATH=$whl_file \
          PACKAGES="[\"pyodide-http\", \"pandas\", \"typing-extensions>=4.10.0\", \"http://localhost:3000/dist/$whl_file\"]" \
          node test-pyodide.js

  validate-description:
    name: Validate PR description
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package using uv
        run: uv sync --all-extras

      - name: Dump description to file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const description = context.payload.pull_request.body;
            fs.writeFileSync('last_git_message.txt', description);
      - name: Validate Changelog section in PR description
        run: uv run python dev.py changelog
