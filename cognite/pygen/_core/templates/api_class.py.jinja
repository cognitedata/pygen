from __future__ import annotations
{% if data_class.has_time_field %}
import datetime{% endif %}
from collections.abc import Sequence
from typing import overload

from cognite.client import CogniteClient
from cognite.client import data_modeling as dm{% if data_class.has_primitive_fields %}
from cognite.client.data_classes.data_modeling.instances import InstanceAggregationResultList{% endif %}

from {{ top_level_package }}.data_classes import (
    ResourcesApplyResult,
    {{ data_class.read_name }},
    {{ data_class.write_name }}{% if data_class.has_primitive_fields %},
    {{ data_class.read_list_name }},
    {{ data_class.field_names }}{% endif %}{% if data_class.has_text_field %},
    {{ data_class.text_field_names }}{% endif %},
    DomainModelApply,
)
from {{ top_level_package }}.data_classes.{{ data_class.file_name }} import (
    {{ data_class.properties_dict_name }},
    {{ data_class.filter_name }},
)

from ._core import DEFAULT_LIMIT_READ, Aggregations, NodeAPI, QueryStep, QueryBuilder{% for field in data_class.one_to_many_edges %}
from .{{ field.edge_api_file_name }} import {{ field.edge_api_class }}{% endfor %}{% for field in data_class.single_timeseries_fields %}
from .{{ field_edge_api_file_name }}_timeseries import {{ field.edge_api_class }}API{% endfor %}
from .{{ api_class.query_file_name }} import {{ api_class.query_class_name }}


class {{ api_class.name }}(NodeAPI[{{ data_class.read_name }}, {{ data_class.write_name }}, {{ data_class.read_list_name }}]):
    def __init__(self, client: CogniteClient, view_by_write_class: dict[type[DomainModelApply], dm.ViewId]):
        view_id = view_by_write_class[{{ data_class.write_name }}]
        super().__init__(
            client=client,
            sources=view_id,
            class_type={{ data_class.read_name }},
            class_apply_type={{ data_class.write_name }},
            class_list={{ data_class.read_list_name }},
        )
        self._view_id = view_id
        self._view_by_write_class = view_by_write_class{% for field in data_class.one_to_many_edges %}
        self.{{ field.edge_api_attribute }} = {{ field.edge_api_class }}(client){% endfor %}{% for timeseries in data_class.single_timeseries_fields %}
        self.{{ timeseries.edge_api_attribute }} = {{ timeseries.edge_api_class }}API(client, view_id){% endfor %}

    def __call__(
            self,{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
            limit: int = DEFAULT_LIMIT_READ,
            filter: dm.Filter | None = None,
    ) -> {{ api_class.query_class_name }}[{{ data_class.read_list_name }}]:
        """Query starting at {{ data_class.doc_list_name }}

        Args:{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ data_class.doc_list_name }} to return. Defaults to 25. Set to -1, float("inf") or None to return all items.
            filter: (Advanced) If the filtering available in the above is not sufficient, you can write your own filtering which will be ANDed with the filter above.

        Returns:
            A query API for {{ data_class.doc_list_name}}

        """
        filter_ = _create_filter(
            self._view_id,{% for parm in list_method.parameters %}
            {{ parm.name }},{% endfor %}
            filter,
        )
        builder = QueryBuilder(
            {{ data_class.read_list_name }},
            [
                QueryStep(
                    name="{{ data_class.variable }}",
                    expression=dm.query.NodeResultSetExpression(
                        from_=None,
                        filter=filter_,
                    ),
                    select=dm.query.Select(
                        [dm.query.SourceSelector(self._view_id, list({{ data_class.properties_dict_name }}.values()))]
                    ),
                    result_cls= {{ data_class.read_name}},
                    max_retrieve_limit=limit,
                )
            ],
        )
        return {{ api_class.query_class_name }}(self._client, builder, self._view_by_write_class)


    def apply(self, {{ data_class.variable }}: {{ data_class.write_name }} | Sequence[{{ data_class.write_name }}], replace: bool = False) -> ResourcesApplyResult:
        """Add or update (upsert) {{data_class.doc_list_name}}.{% if data_class.has_one_to_many_edges %}

        Note: This method iterates through all nodes linked to {{ data_class.variable }} and create them including the edges
        between the nodes. For example, if any of {{ data_class.one_to_many_edges_docs }} are set, then these
        nodes as well as any nodes linked to them, and all the edges linking these nodes will be created.{% endif %}

        Args:
            {{ data_class.variable }}: {{ data_class.doc_name.capitalize() }} or sequence of {{ data_class.doc_list_name }} to upsert.
            replace (bool): How do we behave when a property value exists? Do we replace all matching and existing values with the supplied values (true)?
                Or should we merge in new values for properties together with the existing values (false)? Note: This setting applies for all nodes or edges specified in the ingestion call.
        Returns:
            Created instance(s), i.e., nodes, edges, and time series.

        Examples:

            Create a new {{ data_class.variable }}:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> from {{ top_level_package }}.data_classes import {{ data_class.write_name }}
                >>> client = {{ client_name }}()
                >>> {{ data_class.variable }} = {{ data_class.write_name }}(external_id="my_{{ data_class.variable }}", ...)
                >>> result = client.{{ api_class.client_attribute }}.apply({{ data_class.variable }})

        """
        return self._apply({{ data_class.variable }}, replace)

    def delete(self, external_id: str | Sequence[str], space: str ="{{ data_class.view_id.space }}") -> dm.InstancesDeleteResult:
        """Delete one or more {{ data_class.doc_name }}.

        Args:
            external_id: External id of the {{ data_class.doc_name }} to delete.
            space: The space where all the {{ data_class.doc_name }} are located.

        Returns:
            The instance(s), i.e., nodes and edges which has been deleted. Empty list if nothing was deleted.

        Examples:

            Delete {{ data_class.variable }} by id:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> client.{{ api_class.client_attribute }}.delete("my_{{ data_class.variable }}")
        """
        if isinstance(external_id, str):
            return self._client.data_modeling.instances.delete(nodes=(space, external_id))
        else:
            return self._client.data_modeling.instances.delete(
                nodes=[(space, id) for id in external_id],
            )

    @overload
    def retrieve(self, external_id: str) -> {{ data_class.read_name }}:
        ...

    @overload
    def retrieve(self, external_id: Sequence[str]) -> {{ data_class.read_list_name }}:
        ...

    def retrieve(self, external_id: str | Sequence[str], space: str ="{{ data_class.view_id.space }}") -> {{ data_class.read_name }} | {{ data_class.read_list_name }}:
        """Retrieve one or more {{data_class.doc_list_name}} by id(s).

        Args:
            external_id: External id or list of external ids of the {{ data_class.doc_list_name }}.
            space: The space where all the {{ data_class.doc_list_name }} are located.

        Returns:
            The requested {{ data_class.doc_list_name }}.

        Examples:

            Retrieve {{ data_class.variable }} by id:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> {{ data_class.variable }} = client.{{ api_class.client_attribute }}.retrieve("my_{{ data_class.variable }}")

        """
        if isinstance(external_id, str):
            {% if data_class.has_one_to_many_edges %}{{ data_class.variable }} = self._retrieve((space, external_id))
{% for field in data_class.one_to_many_edges %}
            {{ field.variable }}_edges = self.{{ field.edge_api_attribute }}.retrieve(external_id, space=space)
            {{ data_class.variable }}.{{ field.name }} = [edge.end_node.external_id for edge in {{ field.variable }}_edges]{% endfor %}

            return {{ data_class.variable }}{% else %}return self._retrieve((space, external_id)){% endif %}
        else:
            {% if data_class.has_one_to_many_edges %}{{ data_class.variable_list }} = self._retrieve([(space, ext_id) for ext_id in external_id])
{% for field in data_class.one_to_many_edges %}
            {{ field.variable }}_edges = self.{{ field.edge_api_attribute }}.retrieve({{ data_class.variable_list }}.as_node_ids())
            self._set_{{ field.name }}({{ data_class.variable_list }}, {{ field.variable }}_edges){% endfor %}

            return {{ data_class.variable_list }}{% else %}return self._retrieve([(space, ext_id) for ext_id in external_id]){% endif %}
{% if data_class.has_text_field %}
    def search(
        self,
        query: str,
        properties: {{ data_class.text_field_names }} | Sequence[{{ data_class.text_field_names }}] | None = None,{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,
    ) -> {{ data_class.read_list_name }}:
        """Search {{ data_class.doc_list_name }}

        Args:
            query: The search query,
            properties: The property to search, if nothing is passed all text fields will be searched.{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ data_class.doc_list_name }} to return. Defaults to 25. Set to -1, float("inf") or None to return all items.
            filter: (Advanced) If the filtering available in the above is not sufficient, you can write your own filtering which will be ANDed with the filter above.

        Returns:
            Search results {{ data_class.doc_list_name}} matching the query.

        Examples:

           Search for 'my_{{ data_class.variable }}' in all text properties:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> {{ data_class.variable_list }} = client.{{ api_class.client_attribute }}.search('my_{{ data_class.variable }}')

        """
        filter_ = _create_filter(
            self._view_id,{% for parm in list_method.parameters %}
            {{ parm.name }},{% endfor %}
            filter,
        )
        return self._search(self._view_id, query, {{ data_class.properties_dict_name }}, properties, filter_, limit){% endif %}
{% if data_class.has_primitive_fields %}
    @overload
    def aggregate(
        self,
        aggregations: Aggregations
        | dm.aggregations.MetricAggregation
        | Sequence[Aggregations]
        | Sequence[dm.aggregations.MetricAggregation],
        property: {{ data_class.field_names }} | Sequence[{{ data_class.field_names }}] | None = None,
        group_by: None = None,{% if data_class.has_text_field %}
        query: str | None = None,
        search_properties: {{ data_class.text_field_names }} | Sequence[{{ data_class.text_field_names }}] | None = None,{% endif %}{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,
    ) -> list[dm.aggregations.AggregatedNumberedValue]:
        ...

    @overload
    def aggregate(
        self,
        aggregations: Aggregations
        | dm.aggregations.MetricAggregation
        | Sequence[Aggregations]
        | Sequence[dm.aggregations.MetricAggregation],
        property: {{ data_class.field_names }} | Sequence[{{ data_class.field_names }}] | None = None,
        group_by: {{ data_class.field_names }} | Sequence[{{ data_class.field_names }}] = None,{% if data_class.has_text_field %}
        query: str | None = None,
        search_properties: {{ data_class.text_field_names }} | Sequence[{{ data_class.text_field_names }}] | None = None,{% endif %}{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,
    ) -> InstanceAggregationResultList:
        ...

    def aggregate(
        self,
        aggregate: Aggregations
        | dm.aggregations.MetricAggregation
        | Sequence[Aggregations]
        | Sequence[dm.aggregations.MetricAggregation],
        property: {{ data_class.field_names }} | Sequence[{{ data_class.field_names }}] | None = None,
        group_by: {{ data_class.field_names }} | Sequence[{{ data_class.field_names }}] | None = None,{% if data_class.has_text_field %}
        query: str | None = None,
        search_property: {{ data_class.text_field_names }} | Sequence[{{ data_class.text_field_names }}] | None = None,{% endif %}{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,
    ) -> list[dm.aggregations.AggregatedNumberedValue] | InstanceAggregationResultList:
        """Aggregate data across {{ data_class.doc_list_name }}

        Args:
            aggregate: The aggregation to perform.
            property: The property to perform aggregation on.
            group_by: The property to group by when doing the aggregation.{% if data_class.has_text_field %}
            query: The query to search for in the text field.
            search_property: The text field to search in.{% endif %}{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ data_class.doc_list_name }} to return. Defaults to 25. Set to -1, float("inf") or None to return all items.
            filter: (Advanced) If the filtering available in the above is not sufficient, you can write your own filtering which will be ANDed with the filter above.

        Returns:
            Aggregation results.

        Examples:

            Count {{ data_class.doc_list_name }} in space `my_space`:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> result = client.{{ api_class.client_attribute }}.aggregate("count", space="my_space")

        """

        filter_ = _create_filter(
            self._view_id,{% for parm in list_method.parameters %}
            {{ parm.name }},{% endfor %}
            filter,
        )
        return self._aggregate(
            self._view_id,
            aggregate,
            {{ data_class.properties_dict_name }},
            property,
            group_by,{% if data_class.has_text_field %}
            query,
            search_property,{% else %}
            None,
            None,{% endif %}
            limit,
            filter_,
        )

    def histogram(
        self,
        property: {{ data_class.field_names }},
        interval: float,{% if data_class.has_text_field %}
        query: str | None = None,
        search_property: {{ data_class.text_field_names }} | Sequence[{{ data_class.text_field_names }}] | None = None,{% endif %}{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,
    ) -> dm.aggregations.HistogramValue:
        """Produces histograms for {{ data_class.doc_list_name }}

        Args:
            property: The property to use as the value in the histogram.
            interval: The interval to use for the histogram bins.{% if data_class.has_text_field %}
            query: The query to search for in the text field.
            search_property: The text field to search in.{% endif %}{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ data_class.doc_list_name }} to return. Defaults to 25. Set to -1, float("inf") or None to return all items.
            filter: (Advanced) If the filtering available in the above is not sufficient, you can write your own filtering which will be ANDed with the filter above. {% if data_class.has_one_to_many_edges %}
            retrieve_edges: Whether to retrieve {{ data_class.one_to_many_edges_docs }} external ids for the {{ data_class.doc_list_name }}. Defaults to True.{% endif %}

        Returns:
            Bucketed histogram results.

        """
        filter_ = _create_filter(
            self._view_id,{% for parm in list_method.parameters %}
            {{ parm.name }},{% endfor %}
            filter,
        )
        return self._histogram(
            self._view_id,
            property,
            interval,
            {{ data_class.properties_dict_name }},{% if data_class.has_text_field %}
            query,
            search_property,{% else %}
            None,
            None,{% endif %}
            limit,
            filter_,
        )
{% endif %}

    def list(
        self,{% for parm in list_method.parameters %}
        {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
        limit: int = DEFAULT_LIMIT_READ,
        filter: dm.Filter | None = None,{% if data_class.has_one_to_many_edges %}
        retrieve_edges: bool = True,{% endif %}
    ) -> {{ data_class.read_list_name }}:
        """List/filter {{ data_class.doc_list_name }}

        Args:{% for parm in list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ data_class.doc_list_name }} to return. Defaults to 25. Set to -1, float("inf") or None to return all items.
            filter: (Advanced) If the filtering available in the above is not sufficient, you can write your own filtering which will be ANDed with the filter above. {% if data_class.has_one_to_many_edges %}
            retrieve_edges: Whether to retrieve {{ data_class.one_to_many_edges_docs }} external ids for the {{ data_class.doc_list_name }}. Defaults to True.{% endif %}

        Returns:
            List of requested {{ data_class.doc_list_name}}

        Examples:

            List {{ data_class.doc_list_name }} and limit to 5:

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> {{ data_class.variable_list }} = client.{{ api_class.client_attribute }}.list(limit=5)

        """
        filter_ = _create_filter(
            self._view_id,{% for parm in list_method.parameters %}
            {{ parm.name }},{% endfor %}
            filter,
        )

        {% if data_class.has_one_to_many_edges %}{{ data_class.variable_list }} = self._list(limit=limit, filter=filter_)

        if retrieve_edges:
            space_arg = {"space": space} if space else {}{% for field in data_class.one_to_many_edges %}
            if len(ids := {{ data_class.variable_list }}.as_node_ids()) > IN_FILTER_LIMIT:
                {{ field.variable }}_edges = self.{{ field.edge_api_attribute }}.list(limit=-1, **space_arg)
            else:
                {{ field.variable }}_edges = self.{{ field.edge_api_attribute }}.list(ids, limit=-1)
            self._set_{{ field.name }}({{ data_class.variable_list }}, {{ field.variable }}_edges){% endfor %}

        return {{ data_class.variable_list }}{% else %}return self._list(limit=limit, filter=filter_){% endif %}
