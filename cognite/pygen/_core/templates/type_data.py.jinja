from __future__ import annotations

from typing import ClassVar, Optional

from cognite.client import data_modeling as dm
from pydantic import Field

from .core import CircularModelApply, DomainModel, TypeList

__all__ = ["{{ view_name }}", "{{ view_name }}Apply", "{{ view_name }}List"]


class {{ view_name }}(DomainModel):
    space: ClassVar[str] = "{{ view_space }}"
    {{ read_fields }}


class {{ view_name }}Apply(CircularModelApply):
    space: ClassVar[str] = "{{ view_space }}"
    {{ write_fields }}

    def to_node(self) -> dm.NodeApply:
        return dm.NodeApply(
            space=self.space,
            external_id=self.external_id,
            existing_version=self.existing_version,
            sources=[
                {{ sources }}
            ],
        )


class {{ view_name }}List(TypeList[{{ view_name }}]):
    _NODE = {{ view_name }}
