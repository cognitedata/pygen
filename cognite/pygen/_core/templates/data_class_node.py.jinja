from __future__ import annotations

{% if data_class.has_primitive_field_of_type((dm.Timestamp, dm.Date)) %}
import datetime
{% endif %}
import warnings
from collections.abc import Sequence
{% if data_class.has_dependencies %}
from typing import TYPE_CHECKING, Any, ClassVar, Literal, Optional, Union
{% else %}
from typing import Any, ClassVar, Literal, Optional, Union
{% endif %}
{% if not data_class.use_optional_type %}
{% endif %}

from cognite.client import data_modeling as dm, CogniteClient
{% if data_class.has_primitive_field_of_type(dm.CDFExternalIdReference) %}
from cognite.client.data_classes import (
    {% if data_class.has_primitive_field_of_type(dm.FileReference) %}
    FileMetadata as CogniteFileMetadata,
    FileMetadataWrite as CogniteFileMetadataWrite,
    {% endif %}
    {% if data_class.has_primitive_field_of_type(dm.TimeSeriesReference) %}
    TimeSeries as CogniteTimeSeries,
    TimeSeriesWrite as CogniteTimeSeriesWrite,
    {% endif %}
    {% if data_class.has_primitive_field_of_type(dm.SequenceReference) %}
    Sequence as CogniteSequence,
    SequenceWrite as CogniteSequenceWrite,
    {% endif %}
)
{% endif %}
{% if data_class.use_pydantic_field %}
{{ data_class.import_pydantic_field }}
{% endif %}
from pydantic import field_validator, model_validator, ValidationInfo

from {{ top_level_package }}.data_classes._core import (
    {% if has_default_instance_space %}
    DEFAULT_INSTANCE_SPACE,
    {% endif %}
    DEFAULT_QUERY_LIMIT,
    {% if data_class.is_cognite_timeseries %}
    DataPointsAPI,
    {% endif %}
    {% if data_class.is_cognite_file %}
    FileContentAPI,
    {% endif %}
    DataRecord,
    DataRecordGraphQL,
    DataRecordWrite,
    DomainModel,
    DomainModelWrite,
    DomainModelWriteList,
    DomainModelList,
    DomainRelation,
    DomainRelationWrite,
    GraphQLCore,
    ResourcesWrite,
    {% if data_class.has_primitive_field_of_type(dm.CDFExternalIdReference) %}
    FileMetadata,
    FileMetadataWrite,
    FileMetadataGraphQL,
    {% endif %}
    {% if data_class.has_primitive_field_of_type(dm.TimeSeriesReference) %}
    TimeSeries,
    TimeSeriesWrite,
    TimeSeriesGraphQL,
    TimeSeriesReferenceAPI,
    {% endif %}
    {% if data_class.has_primitive_field_of_type(dm.SequenceReference) %}
    SequenceRead,
    SequenceWrite,
    SequenceGraphQL,
    {% endif %}
    T_DomainModelList,
    as_node_id,
    as_read_args,
    as_write_args,
    is_tuple_id,
    as_instance_dict_id,
    parse_single_connection,
    QueryCore,
    NodeQueryCore,
    StringFilter,
    ViewPropertyId,
    {% if data_class.has_filtering_fields %}
    {{ data_class.filtering_import }}
    {% endif %}
)
{% if data_class.implements %}
{% for implements in data_class.implements %}
from {{ top_level_package }}.data_classes.{{ implements.file_name }} import {{ implements.read_name }}{% if data_class.is_writable or data_class.is_interface %}, {{ implements.write_name }}{% endif +%}
{% endfor %}
{% endif %}
{% if data_class.has_dependencies_not_self %}
if TYPE_CHECKING:
    {% for dependency_class in data_class.dependencies %}
    {% if dependency_class.file_name != data_class.file_name %}
    from {{ top_level_package }}.data_classes.{{ dependency_class.file_name }} import {{ dependency_class.read_name }}, {{ dependency_class.read_list_name }}, {{ dependency_class.graphql_name }}{% if dependency_class.is_writable or dependency_class.is_interface %}, {{ dependency_class.write_name }}, {{ dependency_class.write_list_name }}{% endif +%}
    {% endif %}
    {% endfor %}
{% endif %}


__all__ = [
    "{{ data_class.read_name }}",
    {% if data_class.is_writable or data_class.is_interface %}
    "{{ data_class.write_name }}",
    "{{ data_class.read_name }}Apply",
    {% endif %}
    "{{ data_class.read_list_name }}",
    {% if data_class.is_writable or data_class.is_interface %}
    "{{ data_class.write_list_name }}",
    "{{ data_class.read_name }}ApplyList",
    {% endif %}
    {% if data_class.has_field_of_type(ft.BasePrimitiveField) %}
    "{{ data_class.field_names }}",
    {% endif %}
    {% if data_class.has_primitive_field_of_type((dm.Text, dm.CDFExternalIdReference)) %}
    "{{ data_class.text_field_names }}",
    {% endif %}
    "{{ data_class.graphql_name }}",
]


{{ data_class.text_field_names }} = Literal["external_id", {{ data_class.text_fields_literals }}]
{{ data_class.field_names }} = Literal["external_id", {{ data_class.fields_literals }}]

{{ data_class.properties_dict_name }} = {{'{'}}
    "external_id": "externalId",
    {% for field in data_class.fields_of_type(ft.BasePrimitiveField) %}
    "{{ field.name }}": "{{ field.prop_name }}",
    {% endfor %}
{{'}'}}


class {{ data_class.graphql_name }}(GraphQLCore{% if data_class.has_any_field_model_prefix %}, protected_namespaces=(){% endif %}):
    """This represents the reading version of {{ data_class.doc_name }}, used
    when data is retrieved from CDF using GraphQL.

    It is used when retrieving data from CDF using GraphQL.

    Args:
        space: The space where the node is located.
        external_id: The external id of the {{ data_class.doc_name }}.
        data_record: The data record of the {{ data_class.doc_name }} node.
        {% for field in data_class %}
        {{ field.name }}: {{ field.argument_documentation }}
        {% endfor %}
    """

    view_id: ClassVar[dm.ViewId] = dm.ViewId("{{ data_class.view_id.space }}", "{{ data_class.view_id.external_id }}", "{{ data_class.view_id.version }}")
    {% for field in data_class %}
    {{ field.name }}: {{ field.as_graphql_type_hint() }}
    {% endfor %}

    @model_validator(mode="before")
    def parse_data_record(cls, values: Any) -> Any:
        if not isinstance(values, dict):
            return values
        if "lastUpdatedTime" in values or "createdTime" in values:
            values["dataRecord"] = DataRecordGraphQL(
                created_time=values.pop("createdTime", None),
                last_updated_time=values.pop("lastUpdatedTime", None),
            )
        return values

    {% if data_class.has_field_of_type(ft.CDFExternalListField) %}
    @field_validator({% for field in data_class.fields_of_type(ft.CDFExternalListField) %}"{{ field.name }}", {% endfor %}mode="before")
    def clean_list(cls, value: Any) -> Any:
        if isinstance(value, list):
            return [v for v in value if v is not None] or None
        return value
    {% endif %}

    {% if data_class.has_field_of_type(ft.BaseConnectionField) %}
    @field_validator({% for field in data_class.fields_of_type(ft.BaseConnectionField) %}"{{ field.name }}", {% endfor %}mode="before")
    def parse_graphql(cls, value: Any) -> Any:
        if not isinstance(value, dict):
            return value
        if "items" in value:
            return value["items"]
        return value
    {% endif %}

    def as_read(self) -> {{ data_class.read_name }}:
        """Convert this GraphQL format of {{ data_class.doc_name }} to the reading format."""
        return {{ data_class.read_name }}.model_validate(as_read_args(self))

    {% if data_class.is_writable or data_class.is_interface %}
    def as_write(self) -> {{ data_class.write_name }}:
        """Convert this GraphQL format of {{ data_class.doc_name }} to the writing format."""
        return {{ data_class.write_name }}.model_validate(as_write_args(self))
    {% endif %}


class {{ data_class.read_name }}({{ data_class.read_base_class }}{% if data_class.has_any_field_model_prefix %}, protected_namespaces=(){% endif %}):
    """This represents the reading version of {{ data_class.doc_name }}.

    It is used to when data is retrieved from CDF.

    Args:
        space: The space where the node is located.
        external_id: The external id of the {{ data_class.doc_name }}.
        data_record: The data record of the {{ data_class.doc_name }} node.
        {% for field in data_class %}
        {{ field.name }}: {{ field.argument_documentation }}
        {% endfor %}
    """

    _view_id: ClassVar[dm.ViewId] = {{ data_class.view_id_str }}

    {% if not data_class.implements %}
    space: str{% if has_default_instance_space %} = DEFAULT_INSTANCE_SPACE{% endif +%}
    {% endif %}
    node_type: Union[dm.DirectRelationReference, None] = {% if data_class.node_type %}dm.DirectRelationReference("{{ data_class.node_type.space }}", "{{ data_class.node_type.external_id }}"){% else %}None{% endif +%}
    {% for field in data_class.read_fields %}
    {{ field.name }}: {{ field.as_read_type_hint() }}
    {% endfor %}
    {% if data_class.has_single_connection_fields %}
    @field_validator({{ data_class.single_connection_names }}, mode="before")
    @classmethod
    def parse_single(cls, value: Any, info: ValidationInfo) -> Any:
        return parse_single_connection(value, info.field_name)
    {% endif %}

    {% if data_class.has_multi_connection_fields %}
    @field_validator({{ data_class.multi_connection_names }}, mode="before")
    @classmethod
    def parse_list(cls, value: Any, info: ValidationInfo) -> Any:
        if value is None:
            return None
        return [parse_single_connection(item, info.field_name) for item in value]
    {% endif %}

{% if data_class.is_writable or data_class.is_interface %}
    def as_write(self) -> {{ data_class.write_name }}:
        """Convert this read version of {{ data_class.doc_name }} to the writing version."""
        return {{ data_class.write_name }}.model_validate(as_write_args(self))



class {{ data_class.write_name }}({{ data_class.write_base_class }}{% if data_class.has_any_field_model_prefix %}, protected_namespaces=(){% endif %}):
    """This represents the writing version of {{ data_class.doc_name }}.

    It is used to when data is sent to CDF.

    Args:
        space: The space where the node is located.
        external_id: The external id of the {{ data_class.doc_name }}.
        data_record: The data record of the {{ data_class.doc_name }} node.
        {% for field in data_class %}
        {% if field.is_write_field %}
        {{ field.name }}: {{ field.argument_documentation }}
        {% endif %}
        {% endfor %}
    """
    {% if data_class.has_container_fields_writable %}
    _container_fields: ClassVar[tuple[str, ...]] = ({{ data_class.container_fields_writable_comma_sep }},)
    {% endif %}
    {% if data_class.has_outwards_edges %}
    _outwards_edges: ClassVar[tuple[tuple[str, dm.DirectRelationReference], ...]] = ({{ data_class.outwards_edges_comma_sep }},)
    {% endif %}
    {% if data_class.has_inwards_edges %}
    _inwards_edges: ClassVar[tuple[tuple[str, dm.DirectRelationReference], ...]] = ({{ data_class.inwards_edges_comma_sep }},)
    {% endif %}
    {% if data_class.has_direct_relations_with_source %}
    _direct_relations: ClassVar[tuple[str, ...]] = ({{ data_class.direct_relations_with_source_comma_sep }},)
    {% endif %}

    _view_id: ClassVar[dm.ViewId] = {{ data_class.view_id_str }}

    {% if not data_class.implements %}
    space: str{% if has_default_instance_space %} = DEFAULT_INSTANCE_SPACE{% endif +%}
    {% endif %}
    node_type: Union[dm.DirectRelationReference, dm.NodeId, tuple[str, str], None] = {% if data_class.node_type %}dm.DirectRelationReference("{{ data_class.node_type.space }}", "{{ data_class.node_type.external_id }}"){% else %}None{% endif +%}
    {% for field in data_class.write_fields %}
    {{ field.name }}: {{ field.as_write_type_hint() }}
    {% endfor %}

    {% if data_class.has_write_connection_fields %}
    @field_validator({% for field in data_class.write_connection_fields %}"{{ field.name }}", {% endfor %}mode="before")
    def as_node_id(cls, value: Any) -> Any:
        if isinstance(value, dm.DirectRelationReference):
            return dm.NodeId(value.space, value.external_id)
        elif isinstance(value, tuple) and len(value) == 2 and all(isinstance(item, str) for item in value):
            return dm.NodeId(value[0], value[1])
        elif isinstance(value, list):
            return [cls.as_node_id(item) for item in value]
        return value
    {% endif %}


{% endif %}
class {{ data_class.read_list_name }}(DomainModelList[{{ data_class.read_name }}]):
    """List of {{ data_class.doc_list_name }} in the read version."""

    _INSTANCE = {{ data_class.read_name }}
{% if data_class.is_writable or data_class.is_interface %}
    def as_write(self) -> {{ data_class.write_list_name }}:
        """Convert these read versions of {{ data_class.doc_name }} to the writing versions."""
        return {{ data_class.write_list_name }}([node.as_write() for node in self.data])


    {% for field in data_class.read_connection_fields_including_parents %}
    @property
    def {{ field.name }}(self) -> {{ field.linked_class.read_list_name }}:
        {% if field.linked_class.file_name != data_class.file_name %}
        from .{{ field.linked_class.file_name }} import {{ field.linked_class.read_name }}, {{ field.linked_class.read_list_name }}
        {% endif %}
        {% if field.is_one_to_one %}
        return {{ field.linked_class.read_list_name }}([item.{{ field.name }} for item in self.data if isinstance(item.{{ field.name }}, {{ field.linked_class.read_name }})]){% else %}
        return {{ field.linked_class.read_list_name }}([item for items in self.data for item in items.{{ field.name }} or [] if isinstance(item, {{ field.linked_class.read_name }})])
        {% endif %}

    {% endfor %}

class {{ data_class.write_list_name }}(DomainModelWriteList[{{ data_class.write_name }}]):
    """List of {{ data_class.doc_list_name }} in the writing version."""

    _INSTANCE = {{ data_class.write_name }}
    {% for field in data_class.write_connection_fields_including_parents %}
    @property
    def {{ field.name }}(self) -> {{ field.linked_class.write_list_name }}:
        {% if field.linked_class.file_name != data_class.file_name %}
        from .{{ field.linked_class.file_name }} import {{ field.linked_class.write_name }}, {{ field.linked_class.write_list_name }}
        {% endif %}
        {% if field.is_one_to_one %}
        return {{ field.linked_class.write_list_name }}([item.{{ field.name }} for item in self.data if isinstance(item.{{ field.name }}, {{ field.linked_class.write_name }})]){% else %}
        return {{ field.linked_class.write_list_name }}([item for items in self.data for item in items.{{ field.name }} or [] if isinstance(item, {{ field.linked_class.write_name }})])
        {% endif %}

    {% endfor %}

{% endif %}

def {{ data_class.filter_name }}(
    view_id: dm.ViewId,
    {% for parm in list_method.parameters %}
    {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},
    {% endfor %}
    filter: dm.Filter | None = None,
) -> dm.Filter | None:
    filters: list[dm.Filter] = []
    {% for filter in list_method.implementations %}
    if {{ filter.condition }}:
        filters.append({{ filter.filter_call }}({{ filter.arguments }}))
    {% endfor %}
    if filter:
        filters.append(filter)
    return dm.filters.And(*filters) if filters else None


class _{{ data_class.query_cls_name }}(NodeQueryCore[T_DomainModelList, {{ data_class.read_list_name }}]):
    _view_id = {{ data_class.read_name }}._view_id
    _result_cls = {{ data_class.read_name }}
    _result_list_cls_end = {{ data_class.read_list_name }}

    def __init__(
        self,
        created_types: set[type],
        creation_path: list[QueryCore],
        client: CogniteClient,
        result_list_cls: type[T_DomainModelList],
        expression: dm.query.ResultSetExpression | None = None,
        connection_name: str | None = None,
        connection_property: ViewPropertyId | None = None,
        connection_type: Literal["reverse-list"] | None = None,
        reverse_expression: dm.query.ResultSetExpression | None = None,
    ):
        {% for dependency_class in data_class.dependencies_with_edge_destinations %}
        {% if dependency_class.file_name != data_class.file_name %}
        from .{{ dependency_class.file_name }} import _{{ dependency_class.query_cls_name }}
        {% endif %}
        {% endfor %}

        super().__init__(
            created_types,
            creation_path,
            client,
            result_list_cls,
            expression,
            dm.filters.HasData(views=[self._view_id]),
            connection_name,
            connection_property,
            connection_type,
            reverse_expression,
        )

        {% for field in data_class.fields_of_type(ft.BaseConnectionField) %}
        {% if not field.is_direct_relation_no_source %}
        if _{{ field.linked_class.query_cls_name }} not in created_types:
            self.{{ field.name }} = _{{ field.linked_class.query_cls_name }}(
                created_types.copy(),
                self._creation_path,
                client,
                result_list_cls,
                {% if field.is_edge_with_properties %}
                _{{ field.destination_class.query_cls_name }},
                {% endif %}
                {% if field.is_direct_relation %}
                dm.query.NodeResultSetExpression(
                    through=self._view_id.as_property_ref("{{ field.prop_name }}"),
                    direction="outwards",
                ),
                {% elif field.is_reverse_direct_relation %}
                dm.query.NodeResultSetExpression(
                    through={{ field.through_str }},
                    direction="inwards",
                ),
                {% else %}
                dm.query.EdgeResultSetExpression(
                    direction="{{ field.edge_direction }}",
                    chain_to="destination",
                ),
                {% endif %}
                connection_name="{{ field.name }}",
                connection_property=ViewPropertyId(self._view_id, "{{ field.prop_name }}"),
                {% if field.is_reverse_direct_relation and field.reverse_property.is_one_to_many %}
                connection_type="reverse-list",
                {% endif %}
            )
        {% endif %}

        {% endfor %}
        self.space = StringFilter(self, ["node", "space"])
        self.external_id = StringFilter(self, ["node", "externalId"])
        {% for field in data_class.filtering_fields %}
        self.{{ field.filter_attribute }} = {{ field.filtering_cls }}(self, self._view_id.as_property_ref("{{ field.prop_name }}"))
        {% endfor %}
        self._filter_classes.extend([
            self.space,
            self.external_id,
            {% for field in data_class.filtering_fields %}
            self.{{ field.filter_attribute }},
            {% endfor %}
        ])
        {% if data_class.is_cognite_timeseries %}
        self.data = DataPointsAPI(client, lambda limit: self._list(limit=limit).as_node_ids())
        {% endif %}
        {% if data_class.is_cognite_file %}
        self.content = FileContentAPI(client, lambda limit: self._list(limit=limit).as_node_ids())
        {% endif %}{% for field in data_class.timeseries_fields() %}
        {% if field.is_list %}
        self.{{ field.name }} = TimeSeriesReferenceAPI(client,  lambda limit: [
            ts if isinstance(ts, str) else ts.external_id #type: ignore[misc]
            for item in self._list(limit=limit)
            if item.{{ field.name }} is not None
            for ts in item.{{ field.name }}
            if ts is not None and
               (isinstance(ts, str) or ts.external_id is not None)
        ]) {% else %}
        self.{{ field.name }} = TimeSeriesReferenceAPI(client,  lambda limit: [
            item.{{ field.name }} if isinstance(item.{{ field.name }}, str) else item.{{ field.name }}.external_id #type: ignore[misc]
            for item in self._list(limit=limit)
            if item.{{ field.name }} is not None and
               (isinstance(item.{{ field.name }}, str) or item.{{ field.name }}.external_id is not None)
        ]){% endif %}

{% endfor %}

    def list_{{ data_class.variable }}(self, limit: int = DEFAULT_QUERY_LIMIT) -> {{ data_class.read_list_name }}:
        return self._list(limit=limit)


class {{ data_class.query_cls_name }}(_{{ data_class.query_cls_name }}[{{ data_class.read_list_name }}]):
    def __init__(self, client: CogniteClient):
        super().__init__(set(), [], client, {{ data_class.read_list_name }})
