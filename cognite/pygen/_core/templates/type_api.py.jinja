from __future__ import annotations

from collections import defaultdict
from typing import Dict, List, Sequence, Tuple, overload

from cognite.client import CogniteClient
from cognite.client import data_modeling as dm
from cognite.client._constants import INSTANCES_LIST_LIMIT_DEFAULT

from {{ sdk_name }}.client.data_classes.{{ view_plural.lower() }} import {{ view_name }}, {{ view_name }}Apply, {{ view_name }}List

from ._core import TypeAPI


{{ edge_apis }}


class {{ view_plural.title() }}API(TypeAPI[{{ view_name }}, {{ view_name }}Apply, {{ view_name }}List]):
    def __init__(self, client: CogniteClient):
        super().__init__(
            client=client,
            sources=dm.ViewId("{{ view_space }}", "{{ view_ext_id }}", "{{ view_version }}"),
            class_type={{ view_name }},
            class_apply_type={{ view_name }}Apply,
            class_list={{ view_name }}List,
        )
        self.roles = PersonRolesAPI(client)

    def apply(self, {{ view_name.lower() }}: {{ view_name }}Apply, replace: bool = False) -> dm.InstancesApplyResult:
        return self._client.data_modeling.instances.apply(nodes={{ view_name.lower() }}.to_node(), replace=replace)

    def delete(self, external_id: str | Sequence[str]) -> dm.InstancesDeleteResult:
        if isinstance(external_id, str):
            return self._client.data_modeling.instances.delete(nodes=({{ view_name }}Apply.space, external_id))
        else:
            return self._client.data_modeling.instances.delete(nodes=[({{ view_name }}Apply.space, id) for id in external_id])

    @overload
    def retrieve(self, external_id: str) -> {{ view_name }}:
        ...

    @overload
    def retrieve(self, external_id: Sequence[str]) -> {{ view_name }}List:
        ...

    def retrieve(self, external_id: str | Sequence[str]) -> {{ view_name }} | {{ view_name }}List:
        if isinstance(external_id, str):
            {{ view_name.lower() }} = self._retrieve(("{{ view_space }}", external_id))
            edges = self.roles.retrieve(external_id)
            {{ view_name.lower() }}.roles = [edge.end_node.external_id for edge in edges]
            return {{ view_name.lower() }}
        else:
            {{ view_plural.lower() }} = self._retrieve([("{{ view_space }}", ext_id) for ext_id in external_id])
            edges = self.roles.retrieve(external_id)
            self._set_roles({{ view_plural.lower() }}, edges)
            return {{ view_plural.lower() }}

    def list(self, limit: int = INSTANCES_LIST_LIMIT_DEFAULT) -> {{ view_name }}List:
        {{ view_plural.lower() }} = self._list(limit=limit)

        edges = self.roles.list(limit=-1)
        self._set_roles({{ view_plural.lower() }}, edges)
        return {{ view_plural.lower() }}

{{ edge_helpers }}
