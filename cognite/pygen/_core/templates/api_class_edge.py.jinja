from __future__ import annotations
{% if data_class.has_time_field %}
import datetime{% endif %}

from cognite.client import data_modeling as dm
{% if field.is_property_edge %}
from {{ top_level_package }}.data_classes import (
    {{ field.data_class.read_list_name }},
)
from {{ top_level_package }}.data_classes.{{ field.data_class.file_name }} import {{ field.data_class.filter_name }}
{% endif %}
from ._core import DEFAULT_LIMIT_READ, {% if field.is_property_edge %}EdgePropertyAPI{% else %}EdgeAPI, _create_edge_filter{% endif %}



class {{ field.edge_api_class }}(EdgeAPI):
    def list(
            self,
            {{ data_class.start_class.variable }}: str | list[str] | dm.NodeId | list[dm.NodeId] | None = None,
            {{ data_class.start_class.variable }}_space: str = "{{ instance_space }}",
            {{ data_class.end_class.variable }}: str | list[str] | dm.NodeId | list[dm.NodeId] | None = None,
            {{ data_class.end_class.variable }}_space: str = "{{ instance_space }}",{% for parm in data_class.list_method.parameters %}
            {{ parm.name }}: {{ parm.annotation }} = {{ parm.default }},{% endfor %}
            limit=DEFAULT_LIMIT_READ,
    ) ->{% if field.is_property_edge %}{{ field.data_class.read_list_name }}{% else %}dm.EdgeList{% endif %}:
        """List {{field.doc_name}} edges of a {{ data_class.start_class.doc_name }}.

        Args:
            {{ data_class.start_class.variable }}: ID of the source {{ data_class.start_class.doc_list_name }}.
            {{ data_class.start_class.variable }}_space: Location of the {{ data_class.start_class.doc_list_name }}.
            {{ data_class.end_class.variable }}: ID of the target {{ data_class.end_class.doc_list_name }}.
            {{ data_class.end_class.variable }}_space: Location of the {{ data_class.end_class.doc_list_name }}.{% for parm in data_class.list_method.parameters %}
            {{ parm.name }}: {{ parm.description }}{% endfor %}
            limit: Maximum number of {{ field.doc_name }} edges to return. Defaults to 25. Set to -1, float("inf") or None
                to return all items.

        Returns:
            The requested {{ field.doc_name }} edges.

        Examples:

            List 5 {{field.doc_name}} edges connected to "my_{{ data_class.start_class.variable }}":

                >>> from {{ top_level_package }} import {{ client_name }}
                >>> client = {{ client_name }}()
                >>> {{ data_class.start_class.variable }} = client.{{ api_class.client_attribute }}.{{ field.edge_api_attribute }}.list("my_{{ data_class.start_class.variable }}", limit=5)

        """
        filter_ = {% if field.is_property_edge %}{{ field.data_class.filter_name }}{% else %}_create_edge_filter{% endif %}(
            dm.DirectRelationReference("{{ data_class.edge_type.space }}", "{{ data_class.edge_type.external_id }}"),
            {%  if field.is_property_edge  %}self._view_id},{% endif %}
            {{ data_class.start_class.variable }},
            {{ data_class.start_class.variable }}_space,
            {{ data_class.end_class.variable }},
            {{ data_class.end_class.variable }}_space,{% for parm in data_class.list_method.parameters %}
            {{ parm.name }},{% endfor %}
        )
        return self._list(filter_=filter_, limit=limit)
